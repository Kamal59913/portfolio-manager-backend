generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  isPermanent Boolean      @default(false) @map("is_permanent")
  superAdmin  SuperAdmin[] @relation("RoleToSuperAdmin")
  users       User[]       @relation("RoleToUser")
  permissions Permission[] @relation("PermissionToRole")

  @@map("role")
}

model SuperAdmin {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  name                 String
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at")
  isActive             Boolean   @default(true) @map("is_active")
  isDeleted            Boolean   @default(false) @map("is_deleted")
  roleId               String?   @map("role_id")
  resetPasswordExpires DateTime? @map("reset_password_expires")
  resetPasswordToken   String?   @map("reset_password_token")
  role                 Role?     @relation("RoleToSuperAdmin", fields: [roleId], references: [id])

  @@index([roleId])
  @@map("super_admin")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  isPermanent Boolean  @default(true) @map("is_permanent")
  roles       Role[]   @relation("PermissionToRole")

  @@map("permission")
}

model UserPermission {
  id          String   @id @default(uuid())
  name        String 
  description String?
  userId      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  isPermanent Boolean  @default(true) @map("is_permanent")
  user        User     @relation("userToPermission", fields: [userId], references: [id])

  @@map("user_permissions")
  @@unique([userId, name])
}

model User {
  id                   String           @id @default(uuid())
  schoolId             String           @map("school_id")
  email                String           @unique
  password             String
  name                 String
  roleId               String           @map("role_id")
  isActive             Boolean          @default(true) @map("is_active")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @default(now()) @updatedAt @map("updated_at")
  dateOfBirth          DateTime?        @map("date_of_birth")
  phone                String?
  isDeleted            Boolean          @default(false) @map("is_deleted")
  resetPasswordExpires DateTime?        @map("reset_password_expires")
  resetPasswordToken   String?          @map("reset_password_token")

  imageUrl             String?  @map("image_url")
  cvPdf                String?  @map("cv_pdf")
  description          String?

  titles               Title[] 
  socialLinks          UserSocialLink[]

  about                About?
  skills               Skill[]
  experiences          Experience[]
  technologies         Technology[]
  workStats            WorkExperience?

  userPermission       UserPermission[] @relation("userToPermission") 
  blogs                Blog[]           @relation("postedBy")
  blogLikes            BlogLike[]
  notifications        Notification[]
  queriesSent          Query[]          @relation("sender")
  queryRecipients      QueryRecipient[]
  role                 Role             @relation("RoleToUser", fields: [roleId], references: [id])
  twoFactor            User2FA[]
  devices              UserDevice[]
  preferences          UserPreference[]

  @@index([roleId])
  @@map("user")
}

model User2FA {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  method    String
  secret    String
  isEnabled Boolean  @default(false) @map("is_enabled")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_2fa")
}

model UserPreference {
  id                  String  @id @default(uuid())
  userId              String  @map("user_id")
  notificationEnabled Boolean @default(true) @map("notification_enabled")
  theme               String? @default("light")
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_preference")
}

model UserDevice {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  deviceToken String   @map("device_token")
  platform    String
  lastActive  DateTime @default(now()) @map("last_active")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_device")
}


model Notification {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  notificationType String   @map("notification_type")
  message          String
  isRead           Boolean  @default(false) @map("is_read")
  priority         String?
  isDeleted        Boolean  @default(false) @map("is_deleted")
  createdAt        DateTime @default(now()) @map("created_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification")
}

model Query {
  id         String           @id @default(uuid())
  schoolId   String           @map("school_id")
  senderId   String           @map("sender_id")
  queryType  String           @map("query_type")
  subject    String?
  message    String
  status     String
  isDeleted  Boolean          @default(false) @map("is_deleted")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @default(now()) @updatedAt @map("updated_at")
  sender     User             @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipients QueryRecipient[]

  @@index([senderId])
  @@map("query")
}

model QueryRecipient {
  id           String    @id @default(uuid())
  queryId      String    @map("query_id")
  userId       String    @map("user_id")
  responseText String?   @map("response_text")
  respondedAt  DateTime? @map("responded_at")
  hasResponded Boolean   @default(false) @map("has_responded")
  query        Query     @relation(fields: [queryId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([queryId])
  @@index([userId])
  @@map("query_recipient")
}

model Blog {
  id         String      @id @default(uuid())
  postedById String      @map("posted_by")
  content    String
  blogType   String      @map("blog_type")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")
  postedBy   User        @relation("postedBy", fields: [postedById], references: [id], onDelete: Cascade)
  likes      BlogLike[]
  media      BlogMedia[]

  @@index([postedById])
  @@map("blog")
}

model BlogMedia {
  id        String   @id @default(uuid())
  schoolId  String   @map("school_id")
  blogId    String   @map("blog_id")
  mediaUrl  String   @map("media_url")
  mediaType String   @map("media_type")
  createdAt DateTime @default(now()) @map("created_at")
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@map("feed_media")
}

model BlogLike {
  id        String   @id @default(uuid())
  blogId    String   @map("feed_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  feed      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userId])
  @@map("feed_like")
}


model Gallery {
  id          String   @id @default(uuid())
  imageUrl    String?  @map("image_url")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  @@map("portfolio_gallery")
}



model Title {
  id     String @id @default(uuid())
  title  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_title")
}

model UserSocialLink {
  id       String @id @default(uuid())
  type     String // e.g., "github", "linkedin", "email"
  url      String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, userId])
  @@map("user_social_link")
}

model About {
  id                String  @id @default(uuid())
  title             String
  description       String
  imageUrl          String? @map("image_url")
  projectsCompleted Int     @map("projects_completed")
  yearsExperience   Int     @map("years_experience")
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("about")
}

model Skill {
  id             String   @id @default(uuid())
  name           String
  skillIcon      String   @map("skill_icon")
  experience     String?
  projects       Int      @default(0)
  proficiency    Int      @map("proficiency_rank") // e.g., 0-100
  skillType      String   @map("skill_type")       // e.g., "frontend", "backend"
  skillLevel     String   @map("level_of_skill")   // e.g., "intermediate"
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skill")
}

model Technology {
  id                 String @id @default(uuid())
  name               String
  projectsCompleted  Int    @map("projects_completed")
  yearsExperience    Int    @map("years_experience")
  certifications     Int
  userId             String
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("technology")
}

model Experience {
  id        String @id @default(uuid())
  title     String
  company   String
  fromDate  DateTime
  toDate    DateTime?
  details   String?
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experience")
}

model WorkExperience {
  id                 String  @id @default(uuid())
  years              Int
  projectsDelivered  Int     @map("projects_delivered")
  teamMentored       Int     @map("team_members_mentored")
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_experience")
}